import 'package:flutter/material.dart';
import 'dart:math';

///Create a presentation view as an introduction to your application, which uses a flip animation
///when cycling through the different presentation cards that represent your list of
///[PresentationData].
///
/// @Warning
///
/// Design has no support for landscape mode or screens where width is bigger than height.
class OnboardingScreen extends StatefulWidget {

  ///Create a presentation view for each of your [PresentationData] provided in the [viewData].
  ///attribute.
  ///
  /// @example
  ///
  /// Register delegates and supported locales via the generated locations class in your
  /// MaterialApp widget.
  ///
  /// ```dart
  /// MaterialApp(
  ///   localizationsDelegates: GeneratedLocalizationsClass.localizationsDelegates,
  ///   supportedLocales: GeneratedLocalizationsClass.supportedLocales,
  ///   home: YourApp()
  /// )
  /// ```
  ///
  /// Use that same type when calling this Onboarding Screen.
  ///
  /// ```dart
  /// OnboardingScreen(
  ///   viewData: views,
  ///   navigateTo: const SomeOtherScreen(),
  ///   localizationType: GeneratedLocalizationsClass
  /// )
  /// ```
  ///
  /// @Warning
  ///
  /// For the button texts, also make sure to assign the corresponding translations to the
  /// [skip] [back] [next] [done] keys.
  /// If you are not related to this:
  ///
  /// @see flutter_localization and intl packages.
  ///
  /// @link https://docs.flutter.dev/ui/accessibility-and-internationalization/internationalization
  const OnboardingScreen({
    super.key,
    required this.viewData,
    required this.navigateTo,
    required this.localizationClassType,
  });

  ///The data displayed in each view.
  final List<PresentationData> viewData;

  ///The next widget to navigate to after completing or skipping onboarding.
  final Widget navigateTo;

  ///The type of your class generated by internationalization.
  final Type localizationClassType;

  @override
  State<OnboardingScreen> createState() => _OnboardingScreenState();
}

class _OnboardingScreenState extends State<OnboardingScreen> with SingleTickerProviderStateMixin {
  late final List<PresentationData> _views;
  late AnimationController _controller;
  late Animation<double> _animation;
  int _index = 0;
  int _nextIndex = 0;
  bool _isFlipping = false;

  @override
  void initState() {
    super.initState();
    _views = widget.viewData;
    _controller = AnimationController(
      duration: const Duration(milliseconds: 500),
      vsync: this,
    );
    _animation = Tween<double>(begin: 0, end: pi).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.easeInOut,
    ));

    _animation.addStatusListener((status) {
      if (status == AnimationStatus.completed) {
        setState(() {
          _index = _nextIndex;
          _isFlipping = false;
        });
        _controller.reset();
      }
    });
  }

  void _flipTo(int newIndex) {
    if (!_isFlipping && newIndex != _index) {
      setState(() {
        _nextIndex = newIndex;
        _isFlipping = true;
      });
      _controller.forward();
    }
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final localizations = Localizations.of(context, widget.localizationClassType);
    return Padding(
      padding: const EdgeInsets.only(left: 10.0, right: 10.0, bottom: 10.0),
      child: Column(
        children: [
          Align(
            alignment: Alignment.topRight,
            child: TextButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => widget.navigateTo),
                );
              },
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(localizations.skip),
                  const SizedBox(width: 4),
                  const Icon(Icons.exit_to_app_outlined),
                ],
              ),
            ),
          ),
          Expanded(
            child: GestureDetector(
              onHorizontalDragEnd: (details) {
                if (details.primaryVelocity! < 0 && _index < _views.length - 1) {
                  _flipTo(_index + 1);
                } else if (details.primaryVelocity! > 0 && _index > 0) {
                  _flipTo(_index - 1);
                }
              },
              child: AnimatedBuilder(
                animation: _animation,
                builder: (context, child) {
                  final rotationValue = _animation.value;
                  final isFrontSide = rotationValue < pi / 2;
                  Widget buildRotatedWidget(Widget child, double rotationAngle) {
                    return Transform(
                      alignment: Alignment.center,
                      transform: Matrix4.identity()
                        ..setEntry(3, 2, 0.001)
                        ..rotateY(rotationAngle),
                      child: child,
                    );
                  }
                  final displayWidget =
                  isFrontSide ? _PresentationCard(data: _views[_index]) : buildRotatedWidget
                    (_PresentationCard(data: _views[_nextIndex]), pi);
                  return buildRotatedWidget(
                      displayWidget, _index < _nextIndex ? rotationValue : -rotationValue);
                },
              ),
            ),
          ),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              TextButton(
                onPressed: _index > 0 ? () => _flipTo(_index - 1) : null,
                child: Text(localizations.back),
              ),
              _DotIndicator(numberOfDots: _views.length, selectedIndex: _index),
              TextButton(
                  onPressed: () {
                    if (_index < _views.length - 1) {
                      _flipTo(_index + 1);
                    } else {
                      Navigator.push(
                        context,
                        MaterialPageRoute(builder: (context) => widget.navigateTo),
                      );
                    }
                  },
                  child: Text(_index == _views.length - 1 ? localizations.done : localizations.next)
              )
            ],
          )
        ],
      ),
    );
  }
}

class _PresentationCard extends StatelessWidget {

  const _PresentationCard({required this.data});

  final PresentationData data;

  @override
  Widget build(BuildContext context) {
    Size size = MediaQuery.of(context).size;
    return Card(
      surfaceTintColor: Colors.grey,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(18.0),
      ),
      child: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            SizedBox(
              width: size.width * 0.8,
              height: size.height * 0.5,
              child: Image.asset(
                data.assetUrl,
                fit: BoxFit.fill,
              ),
            ),
            const SizedBox(height: 10.0),
            Text(data.title,
                style: Theme.of(context)
                    .textTheme
                    .titleLarge
                    ?.copyWith(fontWeight: FontWeight.bold)),
            const SizedBox(height: 10.0),
            Text(
                textAlign: TextAlign.center,
                data.description,
                style: Theme.of(context).textTheme.bodyLarge),
          ],
        ),
      ),
    );
  }
}

class _DotIndicator extends StatelessWidget {
  const _DotIndicator({
    required this.numberOfDots,
    required this.selectedIndex,
  });

  final int selectedIndex;
  final int numberOfDots;

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      width: numberOfDots * 24.0,
      height: 20.0,
      child: ListView.builder(
          scrollDirection: Axis.horizontal,
          itemCount: numberOfDots,
          itemBuilder: (context, index) {
            return Padding(
              padding: const EdgeInsets.symmetric(horizontal: 4.0),
              child: SizedBox(
                width: index == selectedIndex ? 20.0 : 15.0,
                height: index == selectedIndex ? 20.0 : 15.0,
                child: CircleAvatar(
                  backgroundColor:
                  index == selectedIndex ? Theme.of(context).colorScheme.primary : Colors.grey,
                ),
              ),
            );
          }),
    );
  }
}

///A data class for the data to be presented in each view of the [OnboardingScreen].
class PresentationData {

  ///Represent the data for each view.
  const PresentationData(this.assetUrl, this.title, this.description);

  ///The asset url of the image.
  final String assetUrl;

  ///The title to be displayed.
  ///
  /// @Considerations
  ///
  ///Use the titleLarge TextStyle from the ThemeData with a bold weight.
  final String title;

  ///The description to be displayed.
  ///
  /// @Considerations
  ///
  ///Use the bodyLarge TextStyle from the ThemeData.
  final String description;
}